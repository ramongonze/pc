{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercício 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Digite um número maior ou igual a 1: 3\n",
      "((1, 1), (2, 4), (3, 9))\n"
     ]
    }
   ],
   "source": [
    "def exercicio_1(n):\n",
    "    tupla = ()\n",
    "    for i in range(1,n + 1):\n",
    "        tupla += (i, i*i),\n",
    "    return tupla\n",
    "n = int(input(\"Digite um número maior ou igual a 1: \"))\n",
    "print(exercicio_1(n))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercício 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Digite um número maior ou igual a 1: 3\n",
      "((1, 1, 1), (2, 4, 8), (3, 9, 27))\n"
     ]
    }
   ],
   "source": [
    "def exercicio_2(n):\n",
    "    tupla = ()\n",
    "    for i in range(1,n + 1):\n",
    "        tupla += (i, i*i, i*i*i),\n",
    "    return tupla\n",
    "n = int(input(\"Digite um número maior ou igual a 1: \"))\n",
    "print(exercicio_2(n))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercício 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3, 4, 5) \n",
      "(6, 7, 8, 9, 10)\n"
     ]
    }
   ],
   "source": [
    "tupla = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n",
    "def exercicio_3(tupla):\n",
    "    for i in tupla:\n",
    "        primeira_metade = tupla[0:len(tupla)//2]\n",
    "        segunda_metade = tupla[len(tupla)//2:]\n",
    "        s = \"{} \\n{}\".format(primeira_metade, segunda_metade)\n",
    "    return s\n",
    "print(exercicio_3(tupla))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercício 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((2, 2, 2), (1, 1, 1, 3, 3, 3))\n"
     ]
    }
   ],
   "source": [
    "t = (1, 1, 1, 2, 2, 2, 3, 3, 3)\n",
    "def exercicio_4(t):\n",
    "    impares = ()\n",
    "    pares = ()\n",
    "    for i in t:\n",
    "        if i %  2 == 0:\n",
    "            pares += i,\n",
    "        else:\n",
    "            impares += i,\n",
    "    return pares, impares\n",
    "print(exercicio_4(t))\n",
    "            "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercício 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('c', 'a', 'r', 'o', 'l', 'i', 's')\n",
      "('c', 'a', 'r', 'o', 'l', 'i', 's')\n"
     ]
    }
   ],
   "source": [
    "l = ['c', 'a', 'r', 'o', 'l', 'i', 's']\n",
    "def exercicio_5_1(l):\n",
    "    tupla = tuple(l)\n",
    "    return tupla\n",
    "print(exercicio_5_1(l))\n",
    "\n",
    "def exercicio_5_2(l):\n",
    "    tupla = ()\n",
    "    for i in l:\n",
    "        tupla += i,\n",
    "    return tupla\n",
    "print(exercicio_5_2(l))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercício 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
